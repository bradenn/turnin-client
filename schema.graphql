# This file was generated based on ".graphqlconfig". Do not edit manually.

schema {
    query: Query
    mutation: Mutation
}

type Assignment {
    _id: ObjectId!
    assigned: Boolean!
    assignmentSubmissions: [Submission!]!
    brief: Brief!
    course: Course!
    created: String
    due: String!
    late: String!
    name: String!
    specification: Specification!
}

type Brief {
    _id: ObjectId!
    created: String!
    description: String!
    markdown: File!
    title: String!
}

type Course {
    _id: ObjectId!
    courseAssignmentCount: Float!
    courseAssignments: [Assignment!]!
    courseFullName: String!
    courseStudentCount: Float!
    created: String!
    description: String!
    instructor: User!
    locked: Boolean!
    name: String!
    section: Float!
}

type File {
    _id: ObjectId!
    created: String!
    link: String!
    name: String!
    owner: User!
    reference: String!
}

type Mutation {
    addCompressedTests(SpecificationId: ObjectId!, fileUpload: Upload!): Specification!
    addProvidedFile(SpecificationId: ObjectId!, fileUpload: Upload!): Specification!
    addRequiredFile(SpecificationId: ObjectId!, file: String!): Specification!
    createAssignment(assignmentInput: AssignmentInput!): Assignment!
    createCourse(courseInput: CourseInput!): Course!
    removeProvidedFile(SpecificationId: ObjectId!, fileId: ObjectId!): Specification!
    removeRequiredFile(SpecificationId: ObjectId!, file: String!): Specification!
    updateSpecification(SpecificationId: ObjectId!, SpecificationInput: SpecificationInput!): Specification!
    uploadSubmission(assignmentId: ObjectId!, submissionUpload: [Upload!]!): Submission!
}

type Query {
    Specification(SpecificationId: ObjectId!): Specification!
    TestSpecification(TestSpecificationId: ObjectId!): TestSpecification!
    assignment(assignmentId: ObjectId!): Assignment!
    course(courseId: ObjectId!): Course!
    file(fileId: ObjectId!): File!
    instructorCourse(courseId: ObjectId!): Course!
    instructorCourses: [Course!]!
    self: User!
    studentAssignments: [Assignment!]!
    submission(submissionId: ObjectId!): Submission!
    user(targetId: ObjectId!): User!
    userSelf: User!
}

type Specification {
    _id: ObjectId!
    command: String!
    course: Course!
    created: String!
    providedFiles: [File!]!
    requiredFiles: [String!]!
    tests: [TestSpecification!]!
    timeout: Float!
}

type Submission {
    _id: ObjectId!
    assignment: Assignment!
    created: String!
    duration: String!
    files: [File!]!
    owner: User!
    passed: Boolean!
    results: [SubmissionResult!]!
    stdout: [String!]
    submissionOwner: User!
}

type SubmissionResult {
    _id: ObjectId!
    created: String!
    exit: Float!
    memory: Float!
    passed: Boolean!
    stderr: [String!]
    stdout: [String!]
    test: TestSpecification!
    testElapsedTime: String!
}

type TestSpecification {
    _id: ObjectId!
    args: [String!]!
    created: String!
    env: [String!]!
    exit: Float!
    hidden: Boolean
    leaks: Boolean
    name: String!
    stderr: File
    stdin: File
    stdout: File
    testContext: [String!]!
    timeout: Float!
}

type User {
    _id: ObjectId!
    account: String!
    courses: [Course!]
    created: String!
    email: String!
    firstname: String!
    fullName: String!
    lastname: String!
    password: String!
    username: String!
}

input AssignmentInput {
    course: String!
    due: String!
    late: String!
    name: String!
}

input CourseInput {
    description: String!
    name: String!
    section: Float!
}

input SpecificationInput {
    command: String!
    timeout: Float!
}


"Mongo object id scalar type"
scalar ObjectId

"The `Upload` scalar type represents a file upload."
scalar Upload
